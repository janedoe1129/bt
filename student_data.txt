// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract StudentData {
    // Structure to store student details
    struct Student {
        uint256 id;
        string name;
        uint256 age;
    }

    // Array to store multiple students
    Student[] public students;

    // Mapping to check if a student with a specific ID exists
    mapping(uint256 => bool) private studentExists;

    // Add a new student to the array
    function addStudent(uint256 _id, string memory _name, uint256 _age) public {
        require(!studentExists[_id], "Student with this ID already exists");

        students.push(Student(_id, _name, _age));
        studentExists[_id] = true;
    }

    // Retrieve a student's data by their index
    function getStudent(uint256 index) public view returns (uint256, string memory, uint256) {
        require(index < students.length, "Invalid index");
        
        Student storage student = students[index];
        return (student.id, student.name, student.age);
    }

    // View total number of students
    function getTotalStudents() public view returns (uint256) {
        return students.length;
    }

    // Fallback function to handle unexpected Ether transfers
    fallback() external payable {}

    // Receive function to handle direct Ether transfers
    receive() external payable {}
}
